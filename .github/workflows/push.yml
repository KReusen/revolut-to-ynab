name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          role-session-name: github
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: infra/terraform

      - name: Terraform Init
        id: init
        run: |
          terraform init -upgrade \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=revolut-to-ynab.tfstate"
        working-directory: infra/terraform/prd

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: infra/terraform/prd

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan \
          -var="ynab_access_token=${{ secrets.YNAB_ACCESS_TOKEN }}" \
          -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
          -var="allowed_senders=${{ secrets.ALLOWED_SENDERS }}" \
          -var="ynab_budget_id=${{ secrets.YNAB_BUDGET_ID }}" \
          -var="ynab_account_id=${{ secrets.YNAB_ACCOUNT_ID }}" \
        working-directory: infra/terraform/prd

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply tfplan
        working-directory: infra/terraform/prd
